{"version":3,"sources":["StyledComponents/MyTextField.js","StyledComponents/MyButton.js","Components/Todo.js","StyledComponents/MyCard.js","Components/Column.js","Components/ListColumns.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","input","color","MyTextField","change","value","classes","TextField","InputProps","className","placeholder","onChange","marginLeft","border","backgroundColor","MyButton","props","Button","onClick","click","variant","disabled","children","Task","styled","div","Handle","Todo","todo","index","onDelete","draggableId","id","provided","ref","innerRef","draggableProps","dragHandleProps","task","IconButton","aria-label","padding","minWidth","height","margin","MyCard","Card","Title","h1","TodoList","Column","todos","column","title","droppableId","droppableProps","map","key","ListColumns","todosObj","columns","todoIds","todoId","find","display","justifyContent","marginTop","flexWrap","TodoApp","onDragEnd","state","submit","Fragment","onSubmit","newTodo","result","Container","App","destination","source","newColumns","startColumn","endColumn","startTodos","endTodos","splice","setState","localStorage","setItem","JSON","stringify","newTodos","inputChangeHandler","e","target","addFormSubmitHandler","preventDefault","uuidv4","push","deleteHandler","reduce","prev","cur","filter","parse","getItem","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb5e21df.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"20rem\",\n  },\n  input: {\n    color: \"white\",\n  },\n});\n\nconst MyTextField = ({ change, value }) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      classes={{ root: classes.root }}\n      InputProps={{\n        className: classes.input,\n      }}\n      placeholder=\"Enter a Todo\"\n      onChange={change}\n      value={value}\n    />\n  );\n};\n\nexport default MyTextField;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginLeft: \"5px\",\n    color: \"white\",\n    border: \"1px solid lightgrey\",\n    \"&:hover\": { backgroundColor: \"#708594\" },\n    \"&:disabled\": {\n      color: \"grey\",\n      border: \"1px solid grey\",\n    },\n  },\n});\n\nconst MyButton = (props) => {\n  const classes = useStyles();\n  return (\n    <Button\n      onClick={props.click}\n      className={classes.root}\n      variant=\"outlined\"\n      disabled={props.value === \"\"}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nexport default MyButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport DragHandle from \"@material-ui/icons/DragHandle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginLeft: \"auto\",\n  },\n});\n\nconst Task = styled.div`\n  min-height: 2rem;\n  width: 12rem;\n  margin: 8px;\n  padding: 2px 8px 2px 8px;\n  display: flex;\n  text-align: left;\n  align-items: center;\n  border-radius: 10px;\n  box-shadow: 0px 0px 6px 1px #39373f;\n  background-color: lightgrey;\n`;\n\nconst Handle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 2px;\n`;\n\nconst Todo = ({ todo, index, onDelete }) => {\n  const classes = useStyles();\n  return (\n    <Draggable draggableId={todo.id} index={index}>\n      {(provided) => (\n        <Task\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Handle>\n            <DragHandle />\n          </Handle>\n          {todo.task}\n          <IconButton\n            onClick={() => onDelete(todo.id)}\n            className={classes.root}\n            aria-label=\"delete\"\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Task>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"lightgrey\",\n    color: \"black\",\n    padding: \"10px\",\n    border: \"solid #00A4FA\",\n    width: \"fit-content\",\n    minWidth: \"224px\",\n    height: \"fit-content\",\n    margin: \"10px\",\n  },\n});\n\nconst MyCard = (props) => {\n  const classes = useStyles();\n  return <Card className={classes.root}>{props.children}</Card>;\n};\n\nexport default MyCard;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport MyCard from \"../StyledComponents/MyCard\";\nimport styled from \"styled-components\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Title = styled.h1`\n  margin-top: 2px;\n  border-bottom: solid;\n`;\n\nconst TodoList = styled.div`\n  //   background-color: blue;\n  min-height: 25px;\n`;\n\nconst Column = ({ todos, column, onDelete }) => {\n  return (\n    <MyCard>\n      <Title>{column.title}</Title>\n      <Droppable droppableId={column.id}>\n        {(provided) => (\n          <TodoList ref={provided.innerRef} {...provided.droppableProps}>\n            {todos.map((todo, index) => (\n              <Todo\n                key={todo.id}\n                todo={todo}\n                index={index}\n                onDelete={onDelete}\n              />\n            ))}\n            {provided.placeholder}\n          </TodoList>\n        )}\n      </Droppable>\n    </MyCard>\n  );\n};\n\nexport default Column;\n","import React from \"react\";\nimport Column from \"./Column\";\n\nconst ListColumns = ({ todosObj, columns, onDelete }) => {\n  return columns.map((column) => {\n    const todos = column.todoIds.map((todoId) =>\n      todosObj.find((todo) => todo.id === todoId)\n    );\n\n    return (\n      <Column\n        key={column.id}\n        todos={todos}\n        column={column}\n        onDelete={onDelete}\n      />\n    );\n  });\n};\n\nexport default ListColumns;\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Container } from \"@material-ui/core\";\nimport MyTextField from \"./StyledComponents/MyTextField\";\nimport MyButton from \"./StyledComponents/MyButton\";\n\nimport ListColumns from \"./Components/ListColumns\";\n\nconst styles = {\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    marginTop: \"20px\",\n    flexWrap: \"wrap\",\n  },\n};\n\nconst useStyles = makeStyles(styles);\n\nconst TodoApp = ({ onDragEnd, state, change, submit, click, onDelete }) => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <form onSubmit={submit}>\n        <MyTextField change={change} value={state.newTodo} />\n        <MyButton click={click} value={state.newTodo}>\n          Add Todo\n        </MyButton>\n      </form>\n      <DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n        <Container className={classes.root}>\n          <ListColumns\n            todosObj={state.todos}\n            columns={state.columns}\n            onDelete={onDelete}\n          />\n        </Container>\n      </DragDropContext>\n    </React.Fragment>\n  );\n};\n\nexport default TodoApp;\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.css\";\n\nimport TodoApp from \"./TodoApp\";\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    columns: [\n      {\n        id: \"column-1\",\n        title: \"ToDo\",\n        todoIds: [],\n      },\n      {\n        id: \"column-2\",\n        title: \"In Progress\",\n        todoIds: [],\n      },\n      {\n        id: \"column-3\",\n        title: \"Complete!\",\n        todoIds: [],\n      },\n    ],\n    newTodo: \"\",\n  };\n\n  componentDidMount() {\n    let todos = JSON.parse(localStorage.getItem(\"todos\"));\n    let columns = JSON.parse(localStorage.getItem(\"columns\"));\n\n    if (todos && columns) {\n      this.setState({ todos: todos, columns: columns });\n    }\n  }\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      const newColumns = [...this.state.columns];\n      const startColumn = newColumns.find(\n        (column) => column.id === source.droppableId\n      );\n      const endColumn = newColumns.find(\n        (column) => column.id === destination.droppableId\n      );\n      const startTodos = [...startColumn.todoIds];\n      const endTodos = [...endColumn.todoIds];\n\n      startTodos.splice(source.index, 1);\n      endTodos.splice(destination.index, 0, draggableId);\n\n      startColumn.todoIds = startTodos;\n      endColumn.todoIds = endTodos;\n\n      this.setState({ columns: newColumns }, () => {\n        localStorage.setItem(\"columns\", JSON.stringify(this.state.columns));\n      });\n      return;\n    }\n\n    const newColumns = [...this.state.columns];\n    const column = newColumns.find(\n      (column) => column.id === source.droppableId\n    );\n\n    const newTodos = [...column.todoIds];\n    newTodos.splice(source.index, 1);\n    newTodos.splice(destination.index, 0, draggableId);\n\n    column.todoIds = newTodos;\n\n    this.setState({ columns: newColumns }, () => {\n      localStorage.setItem(\"columns\", JSON.stringify(this.state.columns));\n    });\n  };\n\n  inputChangeHandler = (e) => {\n    this.setState({ newTodo: e.target.value });\n  };\n\n  addFormSubmitHandler = (e) => {\n    e.preventDefault();\n    if (this.state.newTodo === \"\") {\n      return;\n    }\n    // Copy Todos and Columns\n    const newTodos = [...this.state.todos];\n    const newColumns = [...this.state.columns];\n    // Find first column\n    const column = newColumns.find((column) => column.id === \"column-1\");\n    // Get ids of first column\n    const todoIds = [...column.todoIds];\n    // Populate ID for new task\n    const id = uuidv4();\n    // Push id into column\n    todoIds.push(id);\n    // Put new task in todos object\n    newTodos.push({ id: id, task: this.state.newTodo });\n    // Set todoIds array to column object\n    column.todoIds = todoIds;\n\n    // Update state\n    this.setState({ todos: newTodos, columns: newColumns, newTodo: \"\" }, () => {\n      localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n      localStorage.setItem(\"columns\", JSON.stringify(this.state.columns));\n    });\n  };\n\n  deleteHandler = (id) => {\n    const task = this.state.todos.find((todo) => todo.id === id);\n\n    if (task) {\n      const newColumns = this.state.columns.reduce((prev, cur) => {\n        cur.todoIds = cur.todoIds.filter((todoId) => todoId !== id);\n        prev.push(cur);\n        return prev;\n      }, []);\n\n      const newTodos = this.state.todos.filter((todo) => todo.id !== id);\n\n      this.setState({ todos: newTodos, columns: newColumns }, () => {\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n        localStorage.setItem(\"columns\", JSON.stringify(this.state.columns));\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Title\">\n          Todo<span>List</span>\n        </h1>\n        <p className=\"SubTitle\">With Drag and Drop</p>\n        <TodoApp\n          state={this.state}\n          onDragEnd={this.onDragEnd}\n          change={this.inputChangeHandler}\n          submit={this.addFormSubmitHandler}\n          click={this.addFormSubmitHandler}\n          onDelete={this.deleteHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}