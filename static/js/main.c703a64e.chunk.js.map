{"version":3,"sources":["StyledComponents/MyTextField.js","StyledComponents/MyButton.js","Components/Todo.js","StyledComponents/MyCard.js","Components/Column.js","Components/ListColumns.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","input","width","backgroundColor","MyTextField","change","value","classes","TextField","className","placeholder","onChange","root","marginLeft","color","border","MyButton","props","Button","onClick","click","variant","disabled","children","Task","styled","div","Handle","Todo","todo","index","draggableId","id","provided","ref","innerRef","draggableProps","dragHandleProps","task","padding","height","MyCard","Card","Title","h1","TodoList","Column","todos","column","title","droppableId","droppableProps","map","key","ListColumns","todosObj","columns","columnOrder","columnId","todoIds","todoId","display","justifyContent","marginTop","TodoApp","onDragEnd","state","submit","Fragment","onSubmit","newTodo","result","Container","App","destination","source","startColumn","endColumn","startTodos","endTodos","newColumns","splice","console","log","setState","newTodos","inputChangeHandler","e","target","addFormSubmitHandler","preventDefault","uuidv4","push","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c703a64e.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  input: {\n    width: \"20rem\",\n    backgroundColor: \"rgba(255, 255, 255, 0.3)\",\n  },\n});\n\nconst MyTextField = ({ change, value }) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.input}\n      placeholder=\"Enter a Todo\"\n      onChange={change}\n      value={value}\n    />\n  );\n};\n\nexport default MyTextField;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginLeft: \"5px\",\n    color: \"white\",\n    border: \"1px solid lightgrey\",\n    \"&:hover\": { backgroundColor: \"#708594\" },\n    \"&:disabled\": {\n      color: \"grey\",\n      border: \"1px solid grey\",\n    },\n  },\n});\n\nconst MyButton = (props) => {\n  const classes = useStyles();\n  return (\n    <Button\n      onClick={props.click}\n      className={classes.root}\n      variant=\"outlined\"\n      disabled={props.value === \"\"}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nexport default MyButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport DragHandle from \"@material-ui/icons/DragHandle\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst Task = styled.div`\n  min-height: 2rem;\n  width: 12rem;\n  margin: 8px;\n  padding: 2px 8px 2px 8px;\n  display: flex;\n  text-align: left;\n  align-items: center;\n  border-radius: 10px;\n  box-shadow: 0px 0px 6px 1px #39373f;\n  background-color: lightgrey;\n`;\n\nconst Handle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 2px;\n`;\n\nconst Todo = ({ todo, index }) => {\n  return (\n    <Draggable draggableId={todo.id} index={index}>\n      {(provided) => (\n        <Task ref={provided.innerRef} {...provided.draggableProps}>\n          <Handle {...provided.dragHandleProps}>\n            <DragHandle />\n          </Handle>\n          {todo.task}\n        </Task>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"lightgrey\",\n    color: \"black\",\n    padding: \"10px\",\n    border: \"solid #00A4FA\",\n    width: \"fit-content\",\n    height: \"fit-content\",\n  },\n});\n\nconst MyCard = (props) => {\n  const classes = useStyles();\n  return <Card className={classes.root}>{props.children}</Card>;\n};\n\nexport default MyCard;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport MyCard from \"../StyledComponents/MyCard\";\nimport styled from \"styled-components\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Title = styled.h1`\n  margin-top: 2px;\n  border-bottom: solid;\n`;\n\nconst TodoList = styled.div`\n  //   background-color: blue;\n  min-height: 25px;\n`;\n\nconst Column = ({ todos, column }) => {\n  return (\n    <MyCard>\n      <Title>{column.title}</Title>\n      <Droppable droppableId={column.id}>\n        {(provided) => (\n          <TodoList ref={provided.innerRef} {...provided.droppableProps}>\n            {todos.map((todo, index) => (\n              <Todo key={todo.id} todo={todo} index={index} />\n            ))}\n            {provided.placeholder}\n          </TodoList>\n        )}\n      </Droppable>\n    </MyCard>\n  );\n};\n\nexport default Column;\n","import React from \"react\";\nimport Column from \"./Column\";\n\nconst ListColumns = ({ todosObj, columns, columnOrder }) => {\n  return columnOrder.map((columnId) => {\n    const column = columns[columnId];\n    const todos = column.todoIds.map((todoId) => todosObj[todoId]);\n\n    return <Column key={column.id} todos={todos} column={column} />;\n  });\n};\n\nexport default ListColumns;\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Container } from \"@material-ui/core\";\nimport MyTextField from \"./StyledComponents/MyTextField\";\nimport MyButton from \"./StyledComponents/MyButton\";\n\nimport ListColumns from \"./Components/ListColumns\";\n\nconst styles = {\n  root: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    marginTop: \"20px\",\n  },\n};\n\nconst useStyles = makeStyles(styles);\n\nconst TodoApp = ({ onDragEnd, state, change, submit, click }) => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <form onSubmit={submit}>\n        <MyTextField change={change} value={state.newTodo} />\n        <MyButton click={click} value={state.newTodo}>\n          Add Todo\n        </MyButton>\n      </form>\n      <DragDropContext onDragEnd={(result) => onDragEnd(result)}>\n        <Container className={classes.root}>\n          <ListColumns\n            todosObj={state.todos}\n            columns={state.columns}\n            columnOrder={state.columnOrder}\n          />\n        </Container>\n      </DragDropContext>\n    </React.Fragment>\n  );\n};\n\nexport default TodoApp;\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.css\";\n\nimport TodoApp from \"./TodoApp\";\n\nclass App extends React.Component {\n  state = {\n    todos: {\n      \"1\": { id: \"1\", task: \"do something\" },\n      \"2\": { id: \"2\", task: \"do something else\" },\n    },\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"ToDo\",\n        todoIds: [\"1\", \"2\"],\n      },\n      \"column-2\": {\n        id: \"column-2\",\n        title: \"In Progress\",\n        todoIds: [],\n      },\n      \"column-3\": {\n        id: \"column-3\",\n        title: \"Complete!\",\n        todoIds: [],\n      },\n    },\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n    newTodo: \"\",\n  };\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      const startColumn = this.state.columns[source.droppableId];\n      const endColumn = this.state.columns[destination.droppableId];\n      const startTodos = [...startColumn.todoIds];\n      const endTodos = [...endColumn.todoIds];\n      const newColumns = { ...this.state.columns };\n\n      startTodos.splice(source.index, 1);\n      endTodos.splice(destination.index, 0, draggableId);\n\n      newColumns[source.droppableId].todoIds = startTodos;\n      newColumns[destination.droppableId].todoIds = endTodos;\n      console.log(\"new columns---\", newColumns);\n      this.setState({ columns: newColumns });\n      return;\n    }\n\n    const column = this.state.columns[source.droppableId];\n\n    const newTodos = [...column.todoIds];\n    const newColumns = { ...this.state.columns };\n    newTodos.splice(source.index, 1);\n    newTodos.splice(destination.index, 0, draggableId);\n\n    newColumns[destination.droppableId].todoIds = newTodos;\n\n    this.setState({ columns: newColumns });\n  };\n\n  inputChangeHandler = (e) => {\n    this.setState({ newTodo: e.target.value });\n  };\n\n  addFormSubmitHandler = (e) => {\n    e.preventDefault();\n    if (this.state.newTodo === \"\") {\n      return;\n    }\n    // Copy Todos and Columns\n    const newTodos = { ...this.state.todos };\n    const newColumns = { ...this.state.columns };\n    // Find first column\n    const column = this.state.columns[\"column-1\"];\n    // Get ids of first column\n    const todoIds = [...column.todoIds];\n    // Populate ID for new task\n    const id = uuidv4();\n    // Push id into column\n    todoIds.push(id);\n    // Put new task in todos object\n    newTodos[id] = { id: id, task: this.state.newTodo };\n    // Set todoIds array to column object\n    newColumns[\"column-1\"].todoIds = todoIds;\n\n    // Update state\n    this.setState({ todos: newTodos, columns: newColumns, newTodo: \"\" });\n  };\n\n  render() {\n    console.log(\"columns----\", this.state.columns);\n    return (\n      <div className=\"App\">\n        <h1 className=\"Title\">\n          Todo<span>List</span>\n        </h1>\n        <p className=\"SubTitle\">With Drag and Drop</p>\n        <TodoApp\n          state={this.state}\n          onDragEnd={this.onDragEnd}\n          change={this.inputChangeHandler}\n          submit={this.addFormSubmitHandler}\n          click={this.addFormSubmitHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}